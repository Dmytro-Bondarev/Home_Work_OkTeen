// ==============================================
// -  Створити функцію конструктор для об'єкту який описує теги
// Властивості
//  -назва тегу
//  - опис його дій
//  - масив з атрибутами (2-3 атрибути максимум)
//  Кожен атрибут описати як окремий який буде містити
//  -назву атрибуту
//  -опис дії атрибуту
//  інформацію брати з htmlbook.ru

//  Таким чином описати теги
//  -a
//  -div
//  -h1
//  -span
//  -input
//  -form
//  -option
//  -select
//  Приклад результату
//    {
//         titleOfTag: 'area',
//         action: `Каждый элемент <area> определяет активные области изображения, которые являются ссылками...`,
//         attrs: [
//         {titleOfAttr: 'accesskey', actionOfAttr: 'Переход к области с помощью комбинации клавиш'},
//         {/*some props and values*/},
//         {/*...*/},
//         {/*...*/},
//         ]

//    }
// ==============================================

// function Tag (NameTag,Action,Attrs){
//     this.NameTag = NameTag;
//     this.Action = Action;
//     this.Attrs = Attrs;
// }

// let NTagA = '<a>'
// let ActionA = 'Тег <a> является одним из важных элементов HTML и предназначен для создания ссылок. В зависимости от присутствия атрибутов name или href тег <a> устанавливает ссылку или якорь. Якорем называется закладка внутри страницы, которую можно указать в качестве цели ссылки'
// let AttersA = [
//     {titleOfAttr: 'accesskey', actionOfAttr: 'Переход к области с помощью комбинации клавиш'},
//     {titleOfAttr: 'coords', actionOfAttr: 'Устанавливает координаты активной области.'},
//     {titleOfAttr: 'download', actionOfAttr: 'Предлагает скачать указанный по ссылке файл.'},
// ]
// let NTagDiv = '<div>'
// let ActionDiv = 'Элемент <div> является блочным элементом и предназначен для выделения фрагмента документа с целью изменения вида содержимого. Как правило, вид блока управляется с помощью стилей. Чтобы не описывать каждый раз стиль внутри тега, можно выделить стиль во внешнюю таблицу стилей, а для тега добавить атрибут class или id с именем селектора. '
// let AttersDiv = [
//     {titleOfAttr: 'align', actionOfAttr: 'Задает выравнивание содержимого тега <div>. '},
//     {titleOfAttr: 'title', actionOfAttr: 'Добавляет всплывающую подсказку к содержимому.'},
// ]
// let NTagh1 = '<h1>'
// let Actionh1 = 'HTML предлагает шесть заголовков разного уровня, которые показывают относительную важность секции, расположенной после заголовка. Так, тег <h1> представляет собой наиболее важный заголовок первого уровня, а тег <h6> служит для обозначения заголовка шестого уровня и является наименее значительным. '
// let Attersh1 = [
//     {titleOfAttr: 'align', actionOfAttr: 'Определяет выравнивание заголовка. '},
// ]
// let NTagSpan = '<span>'
// let ActionSpan = 'Тег <span> предназначен для определения строчных элементов документа. В отличие от блочных элементов, таких как <table>, <p> или <div>, с помощью тега <span> можно выделить часть информации внутри других тегов и установить для нее свой стиль. '
// let AttersSpan = [
//     {titleOfAttr: '', actionOfAttr: ''},
// ]
// let NTagInput = '<input>'
// let ActionInput = 'Тег <input> является одним из разносторонних элементов формы и позволяет создавать разные элементы интерфейса и обеспечить взаимодействие с пользователем. Главным образом <input> предназначен для создания текстовых полей, различных кнопок, переключателей и флажков. Хотя элемент <input> не требуется помещать внутрь контейнера <form>, определяющего форму, но если введенные пользователем данные должны быть отправлены на сервер, где их обрабатывает серверная программа, то указывать <form> обязательно. То же самое обстоит и в случае обработки данных с помощью клиентских приложений, например, скриптов на языке JavaScript.'
// let AttersInput = [
//     {titleOfAttr: 'accept', actionOfAttr: 'Устанавливает фильтр на типы файлов, которые вы можете отправить через поле загрузки файлов.'},
//     {titleOfAttr: 'accesskey', actionOfAttr: 'Переход к элементу с помощью комбинации клавиш. '},
// ]
// let NTagForm = '<form>'
// let ActionForm = 'Тег <form> устанавливает форму на веб-странице. Форма предназначена для обмена данными между пользователем и сервером. Область применения форм не ограничена отправкой данных на сервер, с помощью клиентских скриптов можно получить доступ к любому элементу формы, изменять его и применять по своему усмотрению. '
// let AttersForm = [
//     {titleOfAttr: 'accept-charset', actionOfAttr: 'Устанавливает кодировку, в которой сервер может принимать и обрабатывать данные.'},
//     {titleOfAttr: 'action', actionOfAttr: 'Адрес программы или документа, который обрабатывает данные формы. '},
// ]
// let NTagOption = '<option>'
// let ActionOption = 'Тег <option> определяет отдельные пункты списка, создаваемого с помощью контейнера <select>. Ширина списка определяется самым широким текстом, указанным в теге <option>, а также может изменяться с помощью стилей. Если планируется отправлять данные списка на сервер, то требуется поместить элемент <select> внутрь формы.'
// let AttersOption = [
//     {titleOfAttr: 'disabled', actionOfAttr: 'Заблокировать для доступа элемент списка.'},
//     {titleOfAttr: 'label', actionOfAttr: 'Указание метки пункта списка.'},
// ]
// let NTagSelect = '<select>'
// let ActionSelect = 'Тег <select> позволяет создать элемент интерфейса в виде раскрывающегося списка, а также список с одним или множественным выбором, как показано далее. Конечный вид зависит от использования атрибута size тега <select>, который устанавливает высоту списка. Ширина списка определяется самым широким текстом, указанным в теге <option>, а также может изменяться с помощью стилей. '
// let AttersSelect = [
//     {titleOfAttr: 'accesskey', actionOfAttr: 'Позволяет перейти к списку с помощью некоторого сочетания клавиш.'},
//     {titleOfAttr: 'autofocus', actionOfAttr: 'Устанавливает, что список получает фокус после загрузки страницы.'},
// ]
// let a = new Tag (NTagA,ActionA,AttersA)
// let div = new Tag (NTagDiv,ActionDiv,AttersDiv)
// let h1 = new Tag (NTagh1,Actionh1,Attersh1)
// let span = new Tag (NTagSpan,ActionSpan,AttersSpan)
// let input = new Tag (NTagInput,ActionInput,AttersInput)
// let form = new Tag (NTagForm,ActionForm,AttersForm)
// let option = new Tag (NTagOption,ActionOption,AttersOption)
// let select = new Tag (NTagSelect,ActionSelect,AttersSelect)
// console.log(a,div,h1,span,input,form,option,select);


// ==============================================
// -  Створити класс  для об'єкту який описує теги
// Властивості
//  -назва тегу
//  - опис його дій
//  - масив з атрибутами (2-3 атрибути максимум)
//  Кожен атрибут описати як окремий який буде містити
//  -назву атрибуту
//  -опис дії атрибуту
//  інформацію брати з htmlbook.ru

//  Таким чином описати теги
//  -a
//  -div
//  -h1
//  -span
//  -input
//  -form
//  -option
//  -select
//  Приклад результату
//    {
//         titleOfTag: 'area',
//         action: `Каждый элемент <area> определяет активные области изображения, которые являются ссылками...`,
//         attrs: [
//         {titleOfAttr: 'accesskey', actionOfAttr: 'Переход к области с помощью комбинации клавиш'},
//         {/*some props and values*/},
//         {/*...*/},
//         {/*...*/},
//         ]

//    }
// ==============================================

// class Tag{
//     constructor (NameTag,Action,Attrs){
//     this.NameTag = NameTag;
//     this.Action = Action;
//     this.Attrs = Attrs;
// }
// }
// let NTagA = '<a>'
// let ActionA = 'Тег <a> является одним из важных элементов HTML и предназначен для создания ссылок. В зависимости от присутствия атрибутов name или href тег <a> устанавливает ссылку или якорь. Якорем называется закладка внутри страницы, которую можно указать в качестве цели ссылки'
// let AttersA = [
//     {titleOfAttr: 'accesskey', actionOfAttr: 'Переход к области с помощью комбинации клавиш'},
//     {titleOfAttr: 'coords', actionOfAttr: 'Устанавливает координаты активной области.'},
//     {titleOfAttr: 'download', actionOfAttr: 'Предлагает скачать указанный по ссылке файл.'},
// ]
// let NTagDiv = '<div>'
// let ActionDiv = 'Элемент <div> является блочным элементом и предназначен для выделения фрагмента документа с целью изменения вида содержимого. Как правило, вид блока управляется с помощью стилей. Чтобы не описывать каждый раз стиль внутри тега, можно выделить стиль во внешнюю таблицу стилей, а для тега добавить атрибут class или id с именем селектора. '
// let AttersDiv = [
//     {titleOfAttr: 'align', actionOfAttr: 'Задает выравнивание содержимого тега <div>. '},
//     {titleOfAttr: 'title', actionOfAttr: 'Добавляет всплывающую подсказку к содержимому.'},
// ]
// let NTagh1 = '<h1>'
// let Actionh1 = 'HTML предлагает шесть заголовков разного уровня, которые показывают относительную важность секции, расположенной после заголовка. Так, тег <h1> представляет собой наиболее важный заголовок первого уровня, а тег <h6> служит для обозначения заголовка шестого уровня и является наименее значительным. '
// let Attersh1 = [
//     {titleOfAttr: 'align', actionOfAttr: 'Определяет выравнивание заголовка. '},
// ]
// let NTagSpan = '<span>'
// let ActionSpan = 'Тег <span> предназначен для определения строчных элементов документа. В отличие от блочных элементов, таких как <table>, <p> или <div>, с помощью тега <span> можно выделить часть информации внутри других тегов и установить для нее свой стиль. '
// let AttersSpan = [
//     {titleOfAttr: '', actionOfAttr: ''},
// ]
// let NTagInput = '<input>'
// let ActionInput = 'Тег <input> является одним из разносторонних элементов формы и позволяет создавать разные элементы интерфейса и обеспечить взаимодействие с пользователем. Главным образом <input> предназначен для создания текстовых полей, различных кнопок, переключателей и флажков. Хотя элемент <input> не требуется помещать внутрь контейнера <form>, определяющего форму, но если введенные пользователем данные должны быть отправлены на сервер, где их обрабатывает серверная программа, то указывать <form> обязательно. То же самое обстоит и в случае обработки данных с помощью клиентских приложений, например, скриптов на языке JavaScript.'
// let AttersInput = [
//     {titleOfAttr: 'accept', actionOfAttr: 'Устанавливает фильтр на типы файлов, которые вы можете отправить через поле загрузки файлов.'},
//     {titleOfAttr: 'accesskey', actionOfAttr: 'Переход к элементу с помощью комбинации клавиш. '},
// ]
// let NTagForm = '<form>'
// let ActionForm = 'Тег <form> устанавливает форму на веб-странице. Форма предназначена для обмена данными между пользователем и сервером. Область применения форм не ограничена отправкой данных на сервер, с помощью клиентских скриптов можно получить доступ к любому элементу формы, изменять его и применять по своему усмотрению. '
// let AttersForm = [
//     {titleOfAttr: 'accept-charset', actionOfAttr: 'Устанавливает кодировку, в которой сервер может принимать и обрабатывать данные.'},
//     {titleOfAttr: 'action', actionOfAttr: 'Адрес программы или документа, который обрабатывает данные формы. '},
// ]
// let NTagOption = '<option>'
// let ActionOption = 'Тег <option> определяет отдельные пункты списка, создаваемого с помощью контейнера <select>. Ширина списка определяется самым широким текстом, указанным в теге <option>, а также может изменяться с помощью стилей. Если планируется отправлять данные списка на сервер, то требуется поместить элемент <select> внутрь формы.'
// let AttersOption = [
//     {titleOfAttr: 'disabled', actionOfAttr: 'Заблокировать для доступа элемент списка.'},
//     {titleOfAttr: 'label', actionOfAttr: 'Указание метки пункта списка.'},
// ]
// let NTagSelect = '<select>'
// let ActionSelect = 'Тег <select> позволяет создать элемент интерфейса в виде раскрывающегося списка, а также список с одним или множественным выбором, как показано далее. Конечный вид зависит от использования атрибута size тега <select>, который устанавливает высоту списка. Ширина списка определяется самым широким текстом, указанным в теге <option>, а также может изменяться с помощью стилей. '
// let AttersSelect = [
//     {titleOfAttr: 'accesskey', actionOfAttr: 'Позволяет перейти к списку с помощью некоторого сочетания клавиш.'},
//     {titleOfAttr: 'autofocus', actionOfAttr: 'Устанавливает, что список получает фокус после загрузки страницы.'},
// ]
// let a = new Tag (NTagA,ActionA,AttersA)
// let div = new Tag (NTagDiv,ActionDiv,AttersDiv)
// let h1 = new Tag (NTagh1,Actionh1,Attersh1)
// let span = new Tag (NTagSpan,ActionSpan,AttersSpan)
// let input = new Tag (NTagInput,ActionInput,AttersInput)
// let form = new Tag (NTagForm,ActionForm,AttersForm)
// let option = new Tag (NTagOption,ActionOption,AttersOption)
// let select = new Tag (NTagSelect,ActionSelect,AttersSelect)
// console.log(a,div,h1,span,input,form,option,select);


// ==============================================
// - Створити об'єкт car, з властивостями модель, виробник, рік випуску, максимальна швидкість, об'єм двигуна. додати в об'єкт функції:
// -- drive () - яка виводить в консоль "їдемо зі швидкістю {максимальна швидкість} на годину"
// -- info () - яка виводить всю інформацію про автомобіль
// -- increaseMaxSpeed (newSpeed) - яка підвищує значення максимальної швидкості на значення newSpeed
// -- changeYear (newValue) - змінює рік випуску на значення newValue
// -- addDriver (driver) - приймає об'єкт який "водій" з довільним набором полів, і доавляет його в поточний об'єкт car
// ==============================================
// let car = {
//     Model: 'F150',
//     Manufacturer: 'Ford',
//     Year: 2020,
//     maxSpeed: 150,
//     volumeEngine: 560,
//     driver: 'Ivan',

//     speed: function () {
//         console.log(`їдемо зі швидкістю ${this.maxSpeed} на годину`);
//     },

//     info: function () {
//         if(this.driver){
//         console.log(`
//             model: ${this.Model}
//             manufacturer: ${this.Manufacturer}
//             year : ${this.Year}
//             maxSpeed : ${this.maxSpeed}
//             volumeEngine : ${this.volumeEngine}
//             shafer : ${this.driver.name}
//         `);}else{
//             console.log(`
//             model: ${this.Model}
//             manufacturer: ${this.Manufacturer}
//             year : ${this.Year}
//             maxSpeed : ${this.maxSpeed}
//             volumeEngine : ${this.volumeEngine}
//             `);
//         }
//     },
//     increaseMaxSpeed : function (newSpeed){
//         this.maxSpeed += newSpeed
//     },
//     changeYear: function(newValue){
//         this.Year = newValue
//     },
//     addDriver : function (driver){
//         this.driver = driver;
//     }
// }
// let drivers = {name:'Max', age:45}

// car.changeYear(2030)
// car.increaseMaxSpeed(200)
// car.addDriver(drivers)
// car.info()
// car.speed()
// ==============================================
// - Створити функцію конструктор яка дозволяє створювати об'єкти car, з властивостями модель, виробник, рік випуску, максимальна швидкість, об'єм двигуна. додати в об'єкт функції:
// -- drive () - яка виводить в консоль "їдемо зі швидкістю {максимальна швидкість} на годину"
// -- info () - яка виводить всю інформацію про автомобіль
// -- increaseMaxSpeed (newSpeed) - яка підвищує значення максимальної швидкості на значення newSpeed
// -- changeYear (newValue) - змінює рік випуску на значення newValue
// -- addDriver (driver) - приймає об'єкт який "водій" з довільним набором полів, і доавляет його в поточний об'єкт car
// ==============================================
// function car (Model,Manufacturer,Year,maxSpeed,volumeEngine,driver){
//     this.Model= Model ||'F150';
//     this.Manufacturer= Manufacturer ||'Ford';
//     this.Year= Year ||2020;
//     this.maxSpeed= maxSpeed||150;
//     this.volumeEngine= volumeEngine ||560;
//     this.driver= driver ||'Ivan';

//     this.speed= function () {
//         console.log(`їдемо зі швидкістю ${this.maxSpeed} на годину`);
//     };

//     this.info= function () {
//         if(this.driver){
//         console.log(`
//             model: ${this.Model}
//             manufacturer: ${this.Manufacturer}
//             year : ${this.Year}
//             maxSpeed : ${this.maxSpeed}
//             volumeEngine : ${this.volumeEngine}
//             shafer : ${this.driver.name}
//         `);}else{
//             console.log(`
//             model: ${this.Model}
//             manufacturer: ${this.Manufacturer}
//             year : ${this.Year}
//             maxSpeed : ${this.maxSpeed}
//             volumeEngine : ${this.volumeEngine}
//             `);
//         }
//     }
//     this.increaseMaxSpeed = function (newSpeed){
//         this.maxSpeed += newSpeed
//     }
//     this.changeYear= function(newValue){
//         this.Year = newValue
//     }
//     this.addDriver = function (driver){
//         this.driver = driver;
//     }
// }
// let drivers = {name:'Max', age:45}
// let car = new Car()
// car.changeYear(2030)
// car.increaseMaxSpeed(200)
// car.addDriver(drivers)
// car.info()
// car.speed()
// ==============================================
// - Створити клас який дозволяє створювати об'єкти car, з властивостями модель, виробник, рік випуску, максимальна швидкість, об'єм двигуна. додати в об'єкт функції:
// -- drive () - яка виводить в консоль "їдемо зі швидкістю {максимальна швидкість} на годину"
// -- info () - яка виводить всю інформацію про автомобіль
// -- increaseMaxSpeed (newSpeed) - яка підвищує значення максимальної швидкості на значення newSpeed
// -- changeYear (newValue) - змінює рік випуску на значення newValue
// -- addDriver (driver) - приймає об'єкт який "водій" з довільним набором полів, і доавляет його в поточний об'єкт car
// ==============================================


// ==============================================
// -створити класс попелюшка з полями ім'я, вік, розмір ноги
// --Створити 10 попелюшок , покласти їх в масив
// --Сторити об'єкт класу "принц" за допомоги класу який має поля ім'я, вік, туфелька яку він знайшов.
// -- за допоиоги циклу знайти яка попелюшка повинна бути з принцом
// ==============================================



// ==============================================
// -створити функцію конструктор попелюшка з полями ім'я, вік, розмір ноги
// --Створити 10 попелюшок , покласти їх в масив
// --Сторити об'єкт типу "принц" за допомоги функції конструктора з полями ім'я, вік, туфелька яку він знайшов, та функцію "пошук попелюшки"
// -- функція повинна приймати масив попелюшок, та шукає ту котра йому підходить
// ==============================================